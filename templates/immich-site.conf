# Allow internal traffic OR external traffic with a valid SSL client
# certificate to bypass the basic auth check.
geo $is_internal {
  192.168.1.0/24	internal;
  default	external;
}
map "$ssl_client_verify $is_internal" $require_auth {
  default	"true";
  "SUCCESS external" "false";
  "NONE internal" "false";
}

# Default server configuration
#
server {
  server_name photos.tdooner.com;

  # Immich recommended configuration:
  client_max_body_size 5000m;
  # Set headers
  proxy_set_header Host              $host;
  proxy_set_header X-Real-IP         $remote_addr;
  proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;
  # Enable websockets: http://nginx.org/en/docs/http/websocket.html
  proxy_http_version 1.1;
  proxy_set_header   Upgrade    $http_upgrade;
  proxy_set_header   Connection "upgrade";
  proxy_redirect     off;
  # Set timeout
  proxy_read_timeout 600s;
  proxy_send_timeout 600s;
  send_timeout       600s;

  location / {
    if ($require_auth = "false") {
      set $auth_basic off;
    }
    if ($require_auth = "true") {
      set $auth_basic "Photos";
    }

    auth_basic $auth_basic;
    auth_basic_user_file /etc/nginx/htpasswd;

    proxy_pass http://localhost:2283;
  }

  # SSL configuration
  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_client_certificate /opt/immich/client-cert.crt;
  ssl_verify_client optional;

  # Certbot makes the lines below, but certbot won't run if these files don't yet exist.
  #
  # Easiest way to get this to work on a new server is to delete these lines
  # and run `certbot run`. This will re-add the lines, in theory.
    ssl_certificate /etc/letsencrypt/live/photos.tdooner.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/photos.tdooner.com/privkey.pem; # managed by Certbot
}

server {
  listen 80;
  listen [::]:80;

  server_name photos.tdooner.com;

  return 301 https://$host$request_uri;
}
